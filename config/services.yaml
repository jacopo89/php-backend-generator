# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $projectPath: '%kernel.project_dir%'
            $pmsFilesystem: '@gaufrette.pms_filesystem'
            $pmsFilesystemImages: '@gaufrette.pms_images_filesystem'
            $appBaseUrl: '%env(resolve:APP_URL)%'


    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    BackendGenerator\Bundle\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'
            - '../src/Resources/Listing/Repository/GenericListingRepository.php'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    BackendGenerator\Bundle\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones


    _instanceof:
        # services whose classes are instances of CustomInterface will be tagged automatically
        BackendGenerator\Bundle\Provider\ResourceInterface:
            tags: [ 'app.resource_tag' ]
        BackendGenerator\Bundle\Resources\Listing\Repository\ListingRepositoryInterface:
            tags: [ 'app.listing_repository_tag' ]
        BackendGenerator\Bundle\Repository\ResourceRepositoryInterface:
            tags: ['app.resource_repository_tag']


    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    gesdinet.jwtrefreshtoken.refresh_token_manager:
        class: BackendGenerator\Bundle\Doctrine\RefreshTokenManager
        public: true
        arguments: [ '@doctrine.orm.default_entity_manager', 'Gesdinet\JWTRefreshTokenBundle\Entity\RefreshToken' ]

    BackendGenerator\Bundle\Swagger\SwaggerDecorator:
        decorates: 'api_platform.swagger.normalizer.documentation'
        arguments: [ '@BackendGenerator\Bundle\Swagger\SwaggerDecorator.inner' ]
        autoconfigure: false

    BackendGenerator\Bundle\Listener\FileListener:
        tags:
            - {name: doctrine.orm.entity_listener }

    BackendGenerator\Bundle\Provider\ResourceProvider:
        arguments:
            - !tagged_iterator app.resource_tag

    BackendGenerator\Bundle\Resources\Listing\ResourceRepositoryProvider:
        arguments:
            - !tagged_iterator app.listing_repository_tag

    BackendGenerator\Bundle\Provider\ResourceRepositoryProvider:
        arguments:
            - !tagged_iterator app.resource_repository_tag